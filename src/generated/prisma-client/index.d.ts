// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  enrolement: (where?: EnrolementWhereInput) => Promise<boolean>;
  pesee: (where?: PeseeWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  enrolement: (where: EnrolementWhereUniqueInput) => EnrolementNullablePromise;
  enrolements: (args?: {
    where?: EnrolementWhereInput;
    orderBy?: EnrolementOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Enrolement>;
  enrolementsConnection: (args?: {
    where?: EnrolementWhereInput;
    orderBy?: EnrolementOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => EnrolementConnectionPromise;
  pesee: (where: PeseeWhereUniqueInput) => PeseeNullablePromise;
  pesees: (args?: {
    where?: PeseeWhereInput;
    orderBy?: PeseeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Pesee>;
  peseesConnection: (args?: {
    where?: PeseeWhereInput;
    orderBy?: PeseeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => PeseeConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createEnrolement: (data: EnrolementCreateInput) => EnrolementPromise;
  updateEnrolement: (args: {
    data: EnrolementUpdateInput;
    where: EnrolementWhereUniqueInput;
  }) => EnrolementPromise;
  updateManyEnrolements: (args: {
    data: EnrolementUpdateManyMutationInput;
    where?: EnrolementWhereInput;
  }) => BatchPayloadPromise;
  upsertEnrolement: (args: {
    where: EnrolementWhereUniqueInput;
    create: EnrolementCreateInput;
    update: EnrolementUpdateInput;
  }) => EnrolementPromise;
  deleteEnrolement: (where: EnrolementWhereUniqueInput) => EnrolementPromise;
  deleteManyEnrolements: (where?: EnrolementWhereInput) => BatchPayloadPromise;
  createPesee: (data: PeseeCreateInput) => PeseePromise;
  updatePesee: (args: {
    data: PeseeUpdateInput;
    where: PeseeWhereUniqueInput;
  }) => PeseePromise;
  updateManyPesees: (args: {
    data: PeseeUpdateManyMutationInput;
    where?: PeseeWhereInput;
  }) => BatchPayloadPromise;
  upsertPesee: (args: {
    where: PeseeWhereUniqueInput;
    create: PeseeCreateInput;
    update: PeseeUpdateInput;
  }) => PeseePromise;
  deletePesee: (where: PeseeWhereUniqueInput) => PeseePromise;
  deleteManyPesees: (where?: PeseeWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  enrolement: (
    where?: EnrolementSubscriptionWhereInput
  ) => EnrolementSubscriptionPayloadSubscription;
  pesee: (
    where?: PeseeSubscriptionWhereInput
  ) => PeseeSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type PeseeOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "price_ASC"
  | "price_DESC"
  | "paymentMode_ASC"
  | "paymentMode_DESC"
  | "date_ASC"
  | "date_DESC";

export type EnrolementOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "date_ASC"
  | "date_DESC"
  | "code_ASC"
  | "code_DESC"
  | "object_ASC"
  | "object_DESC"
  | "provenance_ASC"
  | "provenance_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "address_ASC"
  | "address_DESC"
  | "email_ASC"
  | "email_DESC"
  | "phone_ASC"
  | "phone_DESC"
  | "password_ASC"
  | "password_DESC"
  | "code_ASC"
  | "code_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type EnrolementWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface PeseeWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  price?: Maybe<Int>;
  price_not?: Maybe<Int>;
  price_in?: Maybe<Int[] | Int>;
  price_not_in?: Maybe<Int[] | Int>;
  price_lt?: Maybe<Int>;
  price_lte?: Maybe<Int>;
  price_gt?: Maybe<Int>;
  price_gte?: Maybe<Int>;
  paymentMode?: Maybe<String>;
  paymentMode_not?: Maybe<String>;
  paymentMode_in?: Maybe<String[] | String>;
  paymentMode_not_in?: Maybe<String[] | String>;
  paymentMode_lt?: Maybe<String>;
  paymentMode_lte?: Maybe<String>;
  paymentMode_gt?: Maybe<String>;
  paymentMode_gte?: Maybe<String>;
  paymentMode_contains?: Maybe<String>;
  paymentMode_not_contains?: Maybe<String>;
  paymentMode_starts_with?: Maybe<String>;
  paymentMode_not_starts_with?: Maybe<String>;
  paymentMode_ends_with?: Maybe<String>;
  paymentMode_not_ends_with?: Maybe<String>;
  date?: Maybe<DateTimeInput>;
  date_not?: Maybe<DateTimeInput>;
  date_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  date_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  date_lt?: Maybe<DateTimeInput>;
  date_lte?: Maybe<DateTimeInput>;
  date_gt?: Maybe<DateTimeInput>;
  date_gte?: Maybe<DateTimeInput>;
  user?: Maybe<UserWhereInput>;
  AND?: Maybe<PeseeWhereInput[] | PeseeWhereInput>;
  OR?: Maybe<PeseeWhereInput[] | PeseeWhereInput>;
  NOT?: Maybe<PeseeWhereInput[] | PeseeWhereInput>;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  address?: Maybe<String>;
  address_not?: Maybe<String>;
  address_in?: Maybe<String[] | String>;
  address_not_in?: Maybe<String[] | String>;
  address_lt?: Maybe<String>;
  address_lte?: Maybe<String>;
  address_gt?: Maybe<String>;
  address_gte?: Maybe<String>;
  address_contains?: Maybe<String>;
  address_not_contains?: Maybe<String>;
  address_starts_with?: Maybe<String>;
  address_not_starts_with?: Maybe<String>;
  address_ends_with?: Maybe<String>;
  address_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  phone?: Maybe<String>;
  phone_not?: Maybe<String>;
  phone_in?: Maybe<String[] | String>;
  phone_not_in?: Maybe<String[] | String>;
  phone_lt?: Maybe<String>;
  phone_lte?: Maybe<String>;
  phone_gt?: Maybe<String>;
  phone_gte?: Maybe<String>;
  phone_contains?: Maybe<String>;
  phone_not_contains?: Maybe<String>;
  phone_starts_with?: Maybe<String>;
  phone_not_starts_with?: Maybe<String>;
  phone_ends_with?: Maybe<String>;
  phone_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  code?: Maybe<String>;
  code_not?: Maybe<String>;
  code_in?: Maybe<String[] | String>;
  code_not_in?: Maybe<String[] | String>;
  code_lt?: Maybe<String>;
  code_lte?: Maybe<String>;
  code_gt?: Maybe<String>;
  code_gte?: Maybe<String>;
  code_contains?: Maybe<String>;
  code_not_contains?: Maybe<String>;
  code_starts_with?: Maybe<String>;
  code_not_starts_with?: Maybe<String>;
  code_ends_with?: Maybe<String>;
  code_not_ends_with?: Maybe<String>;
  pesees_every?: Maybe<PeseeWhereInput>;
  pesees_some?: Maybe<PeseeWhereInput>;
  pesees_none?: Maybe<PeseeWhereInput>;
  enrolements_every?: Maybe<EnrolementWhereInput>;
  enrolements_some?: Maybe<EnrolementWhereInput>;
  enrolements_none?: Maybe<EnrolementWhereInput>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface EnrolementWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  date?: Maybe<DateTimeInput>;
  date_not?: Maybe<DateTimeInput>;
  date_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  date_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  date_lt?: Maybe<DateTimeInput>;
  date_lte?: Maybe<DateTimeInput>;
  date_gt?: Maybe<DateTimeInput>;
  date_gte?: Maybe<DateTimeInput>;
  code?: Maybe<String>;
  code_not?: Maybe<String>;
  code_in?: Maybe<String[] | String>;
  code_not_in?: Maybe<String[] | String>;
  code_lt?: Maybe<String>;
  code_lte?: Maybe<String>;
  code_gt?: Maybe<String>;
  code_gte?: Maybe<String>;
  code_contains?: Maybe<String>;
  code_not_contains?: Maybe<String>;
  code_starts_with?: Maybe<String>;
  code_not_starts_with?: Maybe<String>;
  code_ends_with?: Maybe<String>;
  code_not_ends_with?: Maybe<String>;
  object?: Maybe<String>;
  object_not?: Maybe<String>;
  object_in?: Maybe<String[] | String>;
  object_not_in?: Maybe<String[] | String>;
  object_lt?: Maybe<String>;
  object_lte?: Maybe<String>;
  object_gt?: Maybe<String>;
  object_gte?: Maybe<String>;
  object_contains?: Maybe<String>;
  object_not_contains?: Maybe<String>;
  object_starts_with?: Maybe<String>;
  object_not_starts_with?: Maybe<String>;
  object_ends_with?: Maybe<String>;
  object_not_ends_with?: Maybe<String>;
  provenance?: Maybe<String>;
  provenance_not?: Maybe<String>;
  provenance_in?: Maybe<String[] | String>;
  provenance_not_in?: Maybe<String[] | String>;
  provenance_lt?: Maybe<String>;
  provenance_lte?: Maybe<String>;
  provenance_gt?: Maybe<String>;
  provenance_gte?: Maybe<String>;
  provenance_contains?: Maybe<String>;
  provenance_not_contains?: Maybe<String>;
  provenance_starts_with?: Maybe<String>;
  provenance_not_starts_with?: Maybe<String>;
  provenance_ends_with?: Maybe<String>;
  provenance_not_ends_with?: Maybe<String>;
  user?: Maybe<UserWhereInput>;
  AND?: Maybe<EnrolementWhereInput[] | EnrolementWhereInput>;
  OR?: Maybe<EnrolementWhereInput[] | EnrolementWhereInput>;
  NOT?: Maybe<EnrolementWhereInput[] | EnrolementWhereInput>;
}

export type PeseeWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  email?: Maybe<String>;
  phone?: Maybe<String>;
}>;

export interface EnrolementCreateInput {
  id?: Maybe<ID_Input>;
  code: String;
  object: String;
  provenance: String;
  user: UserCreateOneWithoutEnrolementsInput;
}

export interface UserCreateOneWithoutEnrolementsInput {
  create?: Maybe<UserCreateWithoutEnrolementsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutEnrolementsInput {
  id?: Maybe<ID_Input>;
  name: String;
  address: String;
  email: String;
  phone: String;
  password: String;
  code?: Maybe<String>;
  pesees?: Maybe<PeseeCreateManyWithoutUserInput>;
}

export interface PeseeCreateManyWithoutUserInput {
  create?: Maybe<PeseeCreateWithoutUserInput[] | PeseeCreateWithoutUserInput>;
  connect?: Maybe<PeseeWhereUniqueInput[] | PeseeWhereUniqueInput>;
}

export interface PeseeCreateWithoutUserInput {
  id?: Maybe<ID_Input>;
  price: Int;
  paymentMode: String;
}

export interface EnrolementUpdateInput {
  code?: Maybe<String>;
  object?: Maybe<String>;
  provenance?: Maybe<String>;
  user?: Maybe<UserUpdateOneRequiredWithoutEnrolementsInput>;
}

export interface UserUpdateOneRequiredWithoutEnrolementsInput {
  create?: Maybe<UserCreateWithoutEnrolementsInput>;
  update?: Maybe<UserUpdateWithoutEnrolementsDataInput>;
  upsert?: Maybe<UserUpsertWithoutEnrolementsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutEnrolementsDataInput {
  name?: Maybe<String>;
  address?: Maybe<String>;
  email?: Maybe<String>;
  phone?: Maybe<String>;
  password?: Maybe<String>;
  code?: Maybe<String>;
  pesees?: Maybe<PeseeUpdateManyWithoutUserInput>;
}

export interface PeseeUpdateManyWithoutUserInput {
  create?: Maybe<PeseeCreateWithoutUserInput[] | PeseeCreateWithoutUserInput>;
  delete?: Maybe<PeseeWhereUniqueInput[] | PeseeWhereUniqueInput>;
  connect?: Maybe<PeseeWhereUniqueInput[] | PeseeWhereUniqueInput>;
  set?: Maybe<PeseeWhereUniqueInput[] | PeseeWhereUniqueInput>;
  disconnect?: Maybe<PeseeWhereUniqueInput[] | PeseeWhereUniqueInput>;
  update?: Maybe<
    | PeseeUpdateWithWhereUniqueWithoutUserInput[]
    | PeseeUpdateWithWhereUniqueWithoutUserInput
  >;
  upsert?: Maybe<
    | PeseeUpsertWithWhereUniqueWithoutUserInput[]
    | PeseeUpsertWithWhereUniqueWithoutUserInput
  >;
  deleteMany?: Maybe<PeseeScalarWhereInput[] | PeseeScalarWhereInput>;
  updateMany?: Maybe<
    PeseeUpdateManyWithWhereNestedInput[] | PeseeUpdateManyWithWhereNestedInput
  >;
}

export interface PeseeUpdateWithWhereUniqueWithoutUserInput {
  where: PeseeWhereUniqueInput;
  data: PeseeUpdateWithoutUserDataInput;
}

export interface PeseeUpdateWithoutUserDataInput {
  price?: Maybe<Int>;
  paymentMode?: Maybe<String>;
}

export interface PeseeUpsertWithWhereUniqueWithoutUserInput {
  where: PeseeWhereUniqueInput;
  update: PeseeUpdateWithoutUserDataInput;
  create: PeseeCreateWithoutUserInput;
}

export interface PeseeScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  price?: Maybe<Int>;
  price_not?: Maybe<Int>;
  price_in?: Maybe<Int[] | Int>;
  price_not_in?: Maybe<Int[] | Int>;
  price_lt?: Maybe<Int>;
  price_lte?: Maybe<Int>;
  price_gt?: Maybe<Int>;
  price_gte?: Maybe<Int>;
  paymentMode?: Maybe<String>;
  paymentMode_not?: Maybe<String>;
  paymentMode_in?: Maybe<String[] | String>;
  paymentMode_not_in?: Maybe<String[] | String>;
  paymentMode_lt?: Maybe<String>;
  paymentMode_lte?: Maybe<String>;
  paymentMode_gt?: Maybe<String>;
  paymentMode_gte?: Maybe<String>;
  paymentMode_contains?: Maybe<String>;
  paymentMode_not_contains?: Maybe<String>;
  paymentMode_starts_with?: Maybe<String>;
  paymentMode_not_starts_with?: Maybe<String>;
  paymentMode_ends_with?: Maybe<String>;
  paymentMode_not_ends_with?: Maybe<String>;
  date?: Maybe<DateTimeInput>;
  date_not?: Maybe<DateTimeInput>;
  date_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  date_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  date_lt?: Maybe<DateTimeInput>;
  date_lte?: Maybe<DateTimeInput>;
  date_gt?: Maybe<DateTimeInput>;
  date_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<PeseeScalarWhereInput[] | PeseeScalarWhereInput>;
  OR?: Maybe<PeseeScalarWhereInput[] | PeseeScalarWhereInput>;
  NOT?: Maybe<PeseeScalarWhereInput[] | PeseeScalarWhereInput>;
}

export interface PeseeUpdateManyWithWhereNestedInput {
  where: PeseeScalarWhereInput;
  data: PeseeUpdateManyDataInput;
}

export interface PeseeUpdateManyDataInput {
  price?: Maybe<Int>;
  paymentMode?: Maybe<String>;
}

export interface UserUpsertWithoutEnrolementsInput {
  update: UserUpdateWithoutEnrolementsDataInput;
  create: UserCreateWithoutEnrolementsInput;
}

export interface EnrolementUpdateManyMutationInput {
  code?: Maybe<String>;
  object?: Maybe<String>;
  provenance?: Maybe<String>;
}

export interface PeseeCreateInput {
  id?: Maybe<ID_Input>;
  price: Int;
  paymentMode: String;
  user: UserCreateOneWithoutPeseesInput;
}

export interface UserCreateOneWithoutPeseesInput {
  create?: Maybe<UserCreateWithoutPeseesInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutPeseesInput {
  id?: Maybe<ID_Input>;
  name: String;
  address: String;
  email: String;
  phone: String;
  password: String;
  code?: Maybe<String>;
  enrolements?: Maybe<EnrolementCreateManyWithoutUserInput>;
}

export interface EnrolementCreateManyWithoutUserInput {
  create?: Maybe<
    EnrolementCreateWithoutUserInput[] | EnrolementCreateWithoutUserInput
  >;
  connect?: Maybe<EnrolementWhereUniqueInput[] | EnrolementWhereUniqueInput>;
}

export interface EnrolementCreateWithoutUserInput {
  id?: Maybe<ID_Input>;
  code: String;
  object: String;
  provenance: String;
}

export interface PeseeUpdateInput {
  price?: Maybe<Int>;
  paymentMode?: Maybe<String>;
  user?: Maybe<UserUpdateOneRequiredWithoutPeseesInput>;
}

export interface UserUpdateOneRequiredWithoutPeseesInput {
  create?: Maybe<UserCreateWithoutPeseesInput>;
  update?: Maybe<UserUpdateWithoutPeseesDataInput>;
  upsert?: Maybe<UserUpsertWithoutPeseesInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutPeseesDataInput {
  name?: Maybe<String>;
  address?: Maybe<String>;
  email?: Maybe<String>;
  phone?: Maybe<String>;
  password?: Maybe<String>;
  code?: Maybe<String>;
  enrolements?: Maybe<EnrolementUpdateManyWithoutUserInput>;
}

export interface EnrolementUpdateManyWithoutUserInput {
  create?: Maybe<
    EnrolementCreateWithoutUserInput[] | EnrolementCreateWithoutUserInput
  >;
  delete?: Maybe<EnrolementWhereUniqueInput[] | EnrolementWhereUniqueInput>;
  connect?: Maybe<EnrolementWhereUniqueInput[] | EnrolementWhereUniqueInput>;
  set?: Maybe<EnrolementWhereUniqueInput[] | EnrolementWhereUniqueInput>;
  disconnect?: Maybe<EnrolementWhereUniqueInput[] | EnrolementWhereUniqueInput>;
  update?: Maybe<
    | EnrolementUpdateWithWhereUniqueWithoutUserInput[]
    | EnrolementUpdateWithWhereUniqueWithoutUserInput
  >;
  upsert?: Maybe<
    | EnrolementUpsertWithWhereUniqueWithoutUserInput[]
    | EnrolementUpsertWithWhereUniqueWithoutUserInput
  >;
  deleteMany?: Maybe<EnrolementScalarWhereInput[] | EnrolementScalarWhereInput>;
  updateMany?: Maybe<
    | EnrolementUpdateManyWithWhereNestedInput[]
    | EnrolementUpdateManyWithWhereNestedInput
  >;
}

export interface EnrolementUpdateWithWhereUniqueWithoutUserInput {
  where: EnrolementWhereUniqueInput;
  data: EnrolementUpdateWithoutUserDataInput;
}

export interface EnrolementUpdateWithoutUserDataInput {
  code?: Maybe<String>;
  object?: Maybe<String>;
  provenance?: Maybe<String>;
}

export interface EnrolementUpsertWithWhereUniqueWithoutUserInput {
  where: EnrolementWhereUniqueInput;
  update: EnrolementUpdateWithoutUserDataInput;
  create: EnrolementCreateWithoutUserInput;
}

export interface EnrolementScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  date?: Maybe<DateTimeInput>;
  date_not?: Maybe<DateTimeInput>;
  date_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  date_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  date_lt?: Maybe<DateTimeInput>;
  date_lte?: Maybe<DateTimeInput>;
  date_gt?: Maybe<DateTimeInput>;
  date_gte?: Maybe<DateTimeInput>;
  code?: Maybe<String>;
  code_not?: Maybe<String>;
  code_in?: Maybe<String[] | String>;
  code_not_in?: Maybe<String[] | String>;
  code_lt?: Maybe<String>;
  code_lte?: Maybe<String>;
  code_gt?: Maybe<String>;
  code_gte?: Maybe<String>;
  code_contains?: Maybe<String>;
  code_not_contains?: Maybe<String>;
  code_starts_with?: Maybe<String>;
  code_not_starts_with?: Maybe<String>;
  code_ends_with?: Maybe<String>;
  code_not_ends_with?: Maybe<String>;
  object?: Maybe<String>;
  object_not?: Maybe<String>;
  object_in?: Maybe<String[] | String>;
  object_not_in?: Maybe<String[] | String>;
  object_lt?: Maybe<String>;
  object_lte?: Maybe<String>;
  object_gt?: Maybe<String>;
  object_gte?: Maybe<String>;
  object_contains?: Maybe<String>;
  object_not_contains?: Maybe<String>;
  object_starts_with?: Maybe<String>;
  object_not_starts_with?: Maybe<String>;
  object_ends_with?: Maybe<String>;
  object_not_ends_with?: Maybe<String>;
  provenance?: Maybe<String>;
  provenance_not?: Maybe<String>;
  provenance_in?: Maybe<String[] | String>;
  provenance_not_in?: Maybe<String[] | String>;
  provenance_lt?: Maybe<String>;
  provenance_lte?: Maybe<String>;
  provenance_gt?: Maybe<String>;
  provenance_gte?: Maybe<String>;
  provenance_contains?: Maybe<String>;
  provenance_not_contains?: Maybe<String>;
  provenance_starts_with?: Maybe<String>;
  provenance_not_starts_with?: Maybe<String>;
  provenance_ends_with?: Maybe<String>;
  provenance_not_ends_with?: Maybe<String>;
  AND?: Maybe<EnrolementScalarWhereInput[] | EnrolementScalarWhereInput>;
  OR?: Maybe<EnrolementScalarWhereInput[] | EnrolementScalarWhereInput>;
  NOT?: Maybe<EnrolementScalarWhereInput[] | EnrolementScalarWhereInput>;
}

export interface EnrolementUpdateManyWithWhereNestedInput {
  where: EnrolementScalarWhereInput;
  data: EnrolementUpdateManyDataInput;
}

export interface EnrolementUpdateManyDataInput {
  code?: Maybe<String>;
  object?: Maybe<String>;
  provenance?: Maybe<String>;
}

export interface UserUpsertWithoutPeseesInput {
  update: UserUpdateWithoutPeseesDataInput;
  create: UserCreateWithoutPeseesInput;
}

export interface PeseeUpdateManyMutationInput {
  price?: Maybe<Int>;
  paymentMode?: Maybe<String>;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  address: String;
  email: String;
  phone: String;
  password: String;
  code?: Maybe<String>;
  pesees?: Maybe<PeseeCreateManyWithoutUserInput>;
  enrolements?: Maybe<EnrolementCreateManyWithoutUserInput>;
}

export interface UserUpdateInput {
  name?: Maybe<String>;
  address?: Maybe<String>;
  email?: Maybe<String>;
  phone?: Maybe<String>;
  password?: Maybe<String>;
  code?: Maybe<String>;
  pesees?: Maybe<PeseeUpdateManyWithoutUserInput>;
  enrolements?: Maybe<EnrolementUpdateManyWithoutUserInput>;
}

export interface UserUpdateManyMutationInput {
  name?: Maybe<String>;
  address?: Maybe<String>;
  email?: Maybe<String>;
  phone?: Maybe<String>;
  password?: Maybe<String>;
  code?: Maybe<String>;
}

export interface EnrolementSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<EnrolementWhereInput>;
  AND?: Maybe<
    EnrolementSubscriptionWhereInput[] | EnrolementSubscriptionWhereInput
  >;
  OR?: Maybe<
    EnrolementSubscriptionWhereInput[] | EnrolementSubscriptionWhereInput
  >;
  NOT?: Maybe<
    EnrolementSubscriptionWhereInput[] | EnrolementSubscriptionWhereInput
  >;
}

export interface PeseeSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<PeseeWhereInput>;
  AND?: Maybe<PeseeSubscriptionWhereInput[] | PeseeSubscriptionWhereInput>;
  OR?: Maybe<PeseeSubscriptionWhereInput[] | PeseeSubscriptionWhereInput>;
  NOT?: Maybe<PeseeSubscriptionWhereInput[] | PeseeSubscriptionWhereInput>;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Enrolement {
  id: ID_Output;
  date: DateTimeOutput;
  code: String;
  object: String;
  provenance: String;
}

export interface EnrolementPromise extends Promise<Enrolement>, Fragmentable {
  id: () => Promise<ID_Output>;
  date: () => Promise<DateTimeOutput>;
  code: () => Promise<String>;
  object: () => Promise<String>;
  provenance: () => Promise<String>;
  user: <T = UserPromise>() => T;
}

export interface EnrolementSubscription
  extends Promise<AsyncIterator<Enrolement>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  date: () => Promise<AsyncIterator<DateTimeOutput>>;
  code: () => Promise<AsyncIterator<String>>;
  object: () => Promise<AsyncIterator<String>>;
  provenance: () => Promise<AsyncIterator<String>>;
  user: <T = UserSubscription>() => T;
}

export interface EnrolementNullablePromise
  extends Promise<Enrolement | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  date: () => Promise<DateTimeOutput>;
  code: () => Promise<String>;
  object: () => Promise<String>;
  provenance: () => Promise<String>;
  user: <T = UserPromise>() => T;
}

export interface User {
  id: ID_Output;
  name: String;
  address: String;
  email: String;
  phone: String;
  password: String;
  code?: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  address: () => Promise<String>;
  email: () => Promise<String>;
  phone: () => Promise<String>;
  password: () => Promise<String>;
  code: () => Promise<String>;
  pesees: <T = FragmentableArray<Pesee>>(args?: {
    where?: PeseeWhereInput;
    orderBy?: PeseeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  enrolements: <T = FragmentableArray<Enrolement>>(args?: {
    where?: EnrolementWhereInput;
    orderBy?: EnrolementOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  address: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  phone: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  code: () => Promise<AsyncIterator<String>>;
  pesees: <T = Promise<AsyncIterator<PeseeSubscription>>>(args?: {
    where?: PeseeWhereInput;
    orderBy?: PeseeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  enrolements: <T = Promise<AsyncIterator<EnrolementSubscription>>>(args?: {
    where?: EnrolementWhereInput;
    orderBy?: EnrolementOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  address: () => Promise<String>;
  email: () => Promise<String>;
  phone: () => Promise<String>;
  password: () => Promise<String>;
  code: () => Promise<String>;
  pesees: <T = FragmentableArray<Pesee>>(args?: {
    where?: PeseeWhereInput;
    orderBy?: PeseeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  enrolements: <T = FragmentableArray<Enrolement>>(args?: {
    where?: EnrolementWhereInput;
    orderBy?: EnrolementOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface Pesee {
  id: ID_Output;
  price: Int;
  paymentMode: String;
  date: DateTimeOutput;
}

export interface PeseePromise extends Promise<Pesee>, Fragmentable {
  id: () => Promise<ID_Output>;
  price: () => Promise<Int>;
  paymentMode: () => Promise<String>;
  date: () => Promise<DateTimeOutput>;
  user: <T = UserPromise>() => T;
}

export interface PeseeSubscription
  extends Promise<AsyncIterator<Pesee>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  price: () => Promise<AsyncIterator<Int>>;
  paymentMode: () => Promise<AsyncIterator<String>>;
  date: () => Promise<AsyncIterator<DateTimeOutput>>;
  user: <T = UserSubscription>() => T;
}

export interface PeseeNullablePromise
  extends Promise<Pesee | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  price: () => Promise<Int>;
  paymentMode: () => Promise<String>;
  date: () => Promise<DateTimeOutput>;
  user: <T = UserPromise>() => T;
}

export interface EnrolementConnection {
  pageInfo: PageInfo;
  edges: EnrolementEdge[];
}

export interface EnrolementConnectionPromise
  extends Promise<EnrolementConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<EnrolementEdge>>() => T;
  aggregate: <T = AggregateEnrolementPromise>() => T;
}

export interface EnrolementConnectionSubscription
  extends Promise<AsyncIterator<EnrolementConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<EnrolementEdgeSubscription>>>() => T;
  aggregate: <T = AggregateEnrolementSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface EnrolementEdge {
  node: Enrolement;
  cursor: String;
}

export interface EnrolementEdgePromise
  extends Promise<EnrolementEdge>,
    Fragmentable {
  node: <T = EnrolementPromise>() => T;
  cursor: () => Promise<String>;
}

export interface EnrolementEdgeSubscription
  extends Promise<AsyncIterator<EnrolementEdge>>,
    Fragmentable {
  node: <T = EnrolementSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateEnrolement {
  count: Int;
}

export interface AggregateEnrolementPromise
  extends Promise<AggregateEnrolement>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateEnrolementSubscription
  extends Promise<AsyncIterator<AggregateEnrolement>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PeseeConnection {
  pageInfo: PageInfo;
  edges: PeseeEdge[];
}

export interface PeseeConnectionPromise
  extends Promise<PeseeConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PeseeEdge>>() => T;
  aggregate: <T = AggregatePeseePromise>() => T;
}

export interface PeseeConnectionSubscription
  extends Promise<AsyncIterator<PeseeConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PeseeEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePeseeSubscription>() => T;
}

export interface PeseeEdge {
  node: Pesee;
  cursor: String;
}

export interface PeseeEdgePromise extends Promise<PeseeEdge>, Fragmentable {
  node: <T = PeseePromise>() => T;
  cursor: () => Promise<String>;
}

export interface PeseeEdgeSubscription
  extends Promise<AsyncIterator<PeseeEdge>>,
    Fragmentable {
  node: <T = PeseeSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregatePesee {
  count: Int;
}

export interface AggregatePeseePromise
  extends Promise<AggregatePesee>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePeseeSubscription
  extends Promise<AsyncIterator<AggregatePesee>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface EnrolementSubscriptionPayload {
  mutation: MutationType;
  node: Enrolement;
  updatedFields: String[];
  previousValues: EnrolementPreviousValues;
}

export interface EnrolementSubscriptionPayloadPromise
  extends Promise<EnrolementSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = EnrolementPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = EnrolementPreviousValuesPromise>() => T;
}

export interface EnrolementSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<EnrolementSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = EnrolementSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = EnrolementPreviousValuesSubscription>() => T;
}

export interface EnrolementPreviousValues {
  id: ID_Output;
  date: DateTimeOutput;
  code: String;
  object: String;
  provenance: String;
}

export interface EnrolementPreviousValuesPromise
  extends Promise<EnrolementPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  date: () => Promise<DateTimeOutput>;
  code: () => Promise<String>;
  object: () => Promise<String>;
  provenance: () => Promise<String>;
}

export interface EnrolementPreviousValuesSubscription
  extends Promise<AsyncIterator<EnrolementPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  date: () => Promise<AsyncIterator<DateTimeOutput>>;
  code: () => Promise<AsyncIterator<String>>;
  object: () => Promise<AsyncIterator<String>>;
  provenance: () => Promise<AsyncIterator<String>>;
}

export interface PeseeSubscriptionPayload {
  mutation: MutationType;
  node: Pesee;
  updatedFields: String[];
  previousValues: PeseePreviousValues;
}

export interface PeseeSubscriptionPayloadPromise
  extends Promise<PeseeSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PeseePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PeseePreviousValuesPromise>() => T;
}

export interface PeseeSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PeseeSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PeseeSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PeseePreviousValuesSubscription>() => T;
}

export interface PeseePreviousValues {
  id: ID_Output;
  price: Int;
  paymentMode: String;
  date: DateTimeOutput;
}

export interface PeseePreviousValuesPromise
  extends Promise<PeseePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  price: () => Promise<Int>;
  paymentMode: () => Promise<String>;
  date: () => Promise<DateTimeOutput>;
}

export interface PeseePreviousValuesSubscription
  extends Promise<AsyncIterator<PeseePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  price: () => Promise<AsyncIterator<Int>>;
  paymentMode: () => Promise<AsyncIterator<String>>;
  date: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  name: String;
  address: String;
  email: String;
  phone: String;
  password: String;
  code?: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  address: () => Promise<String>;
  email: () => Promise<String>;
  phone: () => Promise<String>;
  password: () => Promise<String>;
  code: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  address: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  phone: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  code: () => Promise<AsyncIterator<String>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "Pesee",
    embedded: false
  },
  {
    name: "Enrolement",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;

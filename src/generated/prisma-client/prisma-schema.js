module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregatePesee {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar DateTime

scalar Long

type Mutation {
  createPesee(data: PeseeCreateInput!): Pesee!
  updatePesee(data: PeseeUpdateInput!, where: PeseeWhereUniqueInput!): Pesee
  updateManyPesees(data: PeseeUpdateManyMutationInput!, where: PeseeWhereInput): BatchPayload!
  upsertPesee(where: PeseeWhereUniqueInput!, create: PeseeCreateInput!, update: PeseeUpdateInput!): Pesee!
  deletePesee(where: PeseeWhereUniqueInput!): Pesee
  deleteManyPesees(where: PeseeWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Pesee {
  id: ID!
  price: Int!
  paymentMode: String!
  date: DateTime!
  user: User!
}

type PeseeConnection {
  pageInfo: PageInfo!
  edges: [PeseeEdge]!
  aggregate: AggregatePesee!
}

input PeseeCreateInput {
  id: ID
  price: Int!
  paymentMode: String!
  user: UserCreateOneWithoutPeseesInput!
}

input PeseeCreateManyWithoutUserInput {
  create: [PeseeCreateWithoutUserInput!]
  connect: [PeseeWhereUniqueInput!]
}

input PeseeCreateWithoutUserInput {
  id: ID
  price: Int!
  paymentMode: String!
}

type PeseeEdge {
  node: Pesee!
  cursor: String!
}

enum PeseeOrderByInput {
  id_ASC
  id_DESC
  price_ASC
  price_DESC
  paymentMode_ASC
  paymentMode_DESC
  date_ASC
  date_DESC
}

type PeseePreviousValues {
  id: ID!
  price: Int!
  paymentMode: String!
  date: DateTime!
}

input PeseeScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  price: Int
  price_not: Int
  price_in: [Int!]
  price_not_in: [Int!]
  price_lt: Int
  price_lte: Int
  price_gt: Int
  price_gte: Int
  paymentMode: String
  paymentMode_not: String
  paymentMode_in: [String!]
  paymentMode_not_in: [String!]
  paymentMode_lt: String
  paymentMode_lte: String
  paymentMode_gt: String
  paymentMode_gte: String
  paymentMode_contains: String
  paymentMode_not_contains: String
  paymentMode_starts_with: String
  paymentMode_not_starts_with: String
  paymentMode_ends_with: String
  paymentMode_not_ends_with: String
  date: DateTime
  date_not: DateTime
  date_in: [DateTime!]
  date_not_in: [DateTime!]
  date_lt: DateTime
  date_lte: DateTime
  date_gt: DateTime
  date_gte: DateTime
  AND: [PeseeScalarWhereInput!]
  OR: [PeseeScalarWhereInput!]
  NOT: [PeseeScalarWhereInput!]
}

type PeseeSubscriptionPayload {
  mutation: MutationType!
  node: Pesee
  updatedFields: [String!]
  previousValues: PeseePreviousValues
}

input PeseeSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PeseeWhereInput
  AND: [PeseeSubscriptionWhereInput!]
  OR: [PeseeSubscriptionWhereInput!]
  NOT: [PeseeSubscriptionWhereInput!]
}

input PeseeUpdateInput {
  price: Int
  paymentMode: String
  user: UserUpdateOneRequiredWithoutPeseesInput
}

input PeseeUpdateManyDataInput {
  price: Int
  paymentMode: String
}

input PeseeUpdateManyMutationInput {
  price: Int
  paymentMode: String
}

input PeseeUpdateManyWithoutUserInput {
  create: [PeseeCreateWithoutUserInput!]
  delete: [PeseeWhereUniqueInput!]
  connect: [PeseeWhereUniqueInput!]
  set: [PeseeWhereUniqueInput!]
  disconnect: [PeseeWhereUniqueInput!]
  update: [PeseeUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [PeseeUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [PeseeScalarWhereInput!]
  updateMany: [PeseeUpdateManyWithWhereNestedInput!]
}

input PeseeUpdateManyWithWhereNestedInput {
  where: PeseeScalarWhereInput!
  data: PeseeUpdateManyDataInput!
}

input PeseeUpdateWithoutUserDataInput {
  price: Int
  paymentMode: String
}

input PeseeUpdateWithWhereUniqueWithoutUserInput {
  where: PeseeWhereUniqueInput!
  data: PeseeUpdateWithoutUserDataInput!
}

input PeseeUpsertWithWhereUniqueWithoutUserInput {
  where: PeseeWhereUniqueInput!
  update: PeseeUpdateWithoutUserDataInput!
  create: PeseeCreateWithoutUserInput!
}

input PeseeWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  price: Int
  price_not: Int
  price_in: [Int!]
  price_not_in: [Int!]
  price_lt: Int
  price_lte: Int
  price_gt: Int
  price_gte: Int
  paymentMode: String
  paymentMode_not: String
  paymentMode_in: [String!]
  paymentMode_not_in: [String!]
  paymentMode_lt: String
  paymentMode_lte: String
  paymentMode_gt: String
  paymentMode_gte: String
  paymentMode_contains: String
  paymentMode_not_contains: String
  paymentMode_starts_with: String
  paymentMode_not_starts_with: String
  paymentMode_ends_with: String
  paymentMode_not_ends_with: String
  date: DateTime
  date_not: DateTime
  date_in: [DateTime!]
  date_not_in: [DateTime!]
  date_lt: DateTime
  date_lte: DateTime
  date_gt: DateTime
  date_gte: DateTime
  user: UserWhereInput
  AND: [PeseeWhereInput!]
  OR: [PeseeWhereInput!]
  NOT: [PeseeWhereInput!]
}

input PeseeWhereUniqueInput {
  id: ID
}

type Query {
  pesee(where: PeseeWhereUniqueInput!): Pesee
  pesees(where: PeseeWhereInput, orderBy: PeseeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Pesee]!
  peseesConnection(where: PeseeWhereInput, orderBy: PeseeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PeseeConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Subscription {
  pesee(where: PeseeSubscriptionWhereInput): PeseeSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User {
  id: ID!
  name: String!
  address: String!
  email: String!
  phone: String!
  password: String!
  code: String
  pesees(where: PeseeWhereInput, orderBy: PeseeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Pesee!]
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  name: String!
  address: String!
  email: String!
  phone: String!
  password: String!
  code: String
  pesees: PeseeCreateManyWithoutUserInput
}

input UserCreateOneWithoutPeseesInput {
  create: UserCreateWithoutPeseesInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutPeseesInput {
  id: ID
  name: String!
  address: String!
  email: String!
  phone: String!
  password: String!
  code: String
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  address_ASC
  address_DESC
  email_ASC
  email_DESC
  phone_ASC
  phone_DESC
  password_ASC
  password_DESC
  code_ASC
  code_DESC
}

type UserPreviousValues {
  id: ID!
  name: String!
  address: String!
  email: String!
  phone: String!
  password: String!
  code: String
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  name: String
  address: String
  email: String
  phone: String
  password: String
  code: String
  pesees: PeseeUpdateManyWithoutUserInput
}

input UserUpdateManyMutationInput {
  name: String
  address: String
  email: String
  phone: String
  password: String
  code: String
}

input UserUpdateOneRequiredWithoutPeseesInput {
  create: UserCreateWithoutPeseesInput
  update: UserUpdateWithoutPeseesDataInput
  upsert: UserUpsertWithoutPeseesInput
  connect: UserWhereUniqueInput
}

input UserUpdateWithoutPeseesDataInput {
  name: String
  address: String
  email: String
  phone: String
  password: String
  code: String
}

input UserUpsertWithoutPeseesInput {
  update: UserUpdateWithoutPeseesDataInput!
  create: UserCreateWithoutPeseesInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  address: String
  address_not: String
  address_in: [String!]
  address_not_in: [String!]
  address_lt: String
  address_lte: String
  address_gt: String
  address_gte: String
  address_contains: String
  address_not_contains: String
  address_starts_with: String
  address_not_starts_with: String
  address_ends_with: String
  address_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  phone: String
  phone_not: String
  phone_in: [String!]
  phone_not_in: [String!]
  phone_lt: String
  phone_lte: String
  phone_gt: String
  phone_gte: String
  phone_contains: String
  phone_not_contains: String
  phone_starts_with: String
  phone_not_starts_with: String
  phone_ends_with: String
  phone_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  code: String
  code_not: String
  code_in: [String!]
  code_not_in: [String!]
  code_lt: String
  code_lte: String
  code_gt: String
  code_gte: String
  code_contains: String
  code_not_contains: String
  code_starts_with: String
  code_not_starts_with: String
  code_ends_with: String
  code_not_ends_with: String
  pesees_every: PeseeWhereInput
  pesees_some: PeseeWhereInput
  pesees_none: PeseeWhereInput
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  email: String
  phone: String
}
`
      }
    